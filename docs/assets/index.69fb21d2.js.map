{"version":3,"file":"index.69fb21d2.js","sources":["../../vite/modulepreload-polyfill","../../preact/jsx-runtime","../../src/components/Editor.tsx","../../src/components/ButtonOptionsMenu.tsx","../../src/store.ts","../../src/components/CodeResults.tsx","../../src/hooks/codeHooks.ts","../../src/hooks/useExecuteCodeWithMetaframe.ts","../../src/components/ButtonRun.tsx","../../src/components/ButtonHelp.tsx","../../src/components/ButtonPresentationMode.tsx","../../src/routes/home.tsx","../../src/App.tsx","../../src/index.tsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import * as jsxRuntime from \"/repo/node_modules/preact/jsx-runtime/dist/jsxRuntime.js\"\nexport const jsx = jsxRuntime.jsx\nexport const jsxs = jsxRuntime.jsxs\nexport const Fragment = jsxRuntime.Fragment","import { FunctionalComponent } from \"preact\";\nimport MonacoEditor from \"@monaco-editor/react\";\nimport { Box } from \"@chakra-ui/react\";\n\nexport type EditorProps = {\n  mode: string;\n  value: string | undefined;\n  setValue: (value: string | undefined) => void;\n  theme: string;\n};\n\nexport const Editor: FunctionalComponent<EditorProps> = ({\n  mode,\n  value,\n  setValue,\n  theme,\n}) => {\n  return (\n    <Box borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\">\n      <MonacoEditor\n        defaultLanguage={mode}\n        theme={theme}\n        options={{\n          minimap: { enabled: false },\n        }}\n        onChange={setValue}\n        value={value}\n        width=\"100%\"\n        height=\"70vh\"\n      />\n    </Box>\n  );\n};\n","import { FunctionalComponent } from \"preact\";\nimport { useEffect, useState, useCallback } from \"preact/hooks\";\nimport { useHashParamJson } from \"@metapages/metaframe-hook\";\nimport {\n  Box,\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerHeader,\n  DrawerBody,\n  Grid,\n  GridItem,\n  IconButton,\n  Input,\n  Select,\n  HStack,\n  Spacer,\n  Switch,\n  Text,\n} from \"@chakra-ui/react\";\nimport { CheckIcon, CloseIcon, SettingsIcon } from \"@chakra-ui/icons\";\n\nexport type OptionType = \"string\" | \"boolean\" | \"option\" | \"number\";\n\nexport type Option = {\n  name: string;\n  displayName: string;\n  default?: string | boolean | number;\n  type?: OptionType; // defaults to string\n  options?: string[];\n  // if the type is \"option\" and there are suboptions then\n  // the suboptions are added to all options\n  suboptions?: { [name in string]: Option[] };\n  validator?: (val: string | boolean | number) => string | undefined; // undefined == 👍, string is an error message\n  map?: (val: string | boolean | number) => any; // convert value to proper type\n};\n\nconst useOptions = (options: Option[], chosenOptions?: GenericOptions) => {\n  const [optionsState, setOptionsState] = useState<Option[]>(options);\n\n  useEffect(() => {\n    let newOptions = options.concat([]);\n    options.forEach((option) => {\n      if (option.type === \"option\" && option.suboptions && chosenOptions) {\n        Object.keys(chosenOptions).forEach((key) => {\n          const val = chosenOptions[key] as string | undefined;\n          if (val && option?.suboptions?.[val]) {\n            newOptions = newOptions.concat(option.suboptions[val]);\n          }\n        });\n      }\n    });\n\n    setOptionsState(newOptions);\n  }, [chosenOptions, setOptionsState, options]);\n\n  return [optionsState];\n};\n\nexport const ButtonOptionsMenu: FunctionalComponent<{\n  options: Option[];\n  hashkey?: string;\n}> = ({ hashkey, options }) => {\n  const [open, setOpen] = useState<boolean>(false);\n\n  const onClick = useCallback(() => {\n    setOpen(!open);\n  }, [open]);\n\n  return (\n    <>\n      <IconButton\n        verticalAlign=\"top\"\n        aria-label=\"Metaframe settings\"\n        // @ts-ignore\n        icon={<SettingsIcon />}\n        size=\"md\"\n        onClick={onClick}\n      />\n      <OptionsMenu\n        hashkey={hashkey}\n        isOpen={open}\n        setOpen={setOpen}\n        options={options}\n      />\n    </>\n  );\n};\n\nexport type GenericOptions = Record<string, string | boolean | number | undefined>;\n\nconst OptionsMenu: FunctionalComponent<{\n  isOpen: boolean;\n  setOpen: (open: boolean) => void;\n  options: Option[];\n  hashkey?: string;\n}> = ({ hashkey, isOpen, setOpen, options }) => {\n  // isOpen = true; // for debugging/developing\n\n  const [optionsInHashParams, setOptionsInHashParams] =\n    useHashParamJson<GenericOptions>(\n      hashkey ? hashkey : \"options\",\n      Object.fromEntries(\n        options\n          .filter((o) => o.default)\n          .map((option) => [option!.name!, option!.default!])\n      )\n    );\n\n  const [localOptions, setLocalOptions] = useState<GenericOptions>(\n    optionsInHashParams || {}\n  );\n\n  const [filteredOptions] = useOptions(options, localOptions);\n\n  const [errors, setErrors] = useState<Record<string, string> | undefined>(\n    undefined\n  );\n\n  const handleOnChange = useCallback(\n    (event: any) => {\n      const { name, value } = event.target as HTMLInputElement;\n      let flattenedOptions = options.concat([]);\n      options.forEach((o) => {\n        if (o.suboptions) {\n          const arrays = Object.values(o.suboptions);\n          arrays.forEach(\n            (oo) => (flattenedOptions = flattenedOptions.concat(oo))\n          );\n        }\n      });\n\n      const option = flattenedOptions.find((o) => o.name === name) as Option; // assume we always find one since we configured it from options\n      // save boolean true as \"1\"\n      if (!option) {\n        console.error(`No option found for name=${name}`);\n        return;\n      }\n      if (option.type === \"boolean\") {\n        setLocalOptions({ ...localOptions, [name]: value === \"1\" });\n      // } else if (option.type === \"number\") {\n      //   setLocalOptions({ ...localOptions, [name]: value !== undefined && value !== \"\" ? parseFloat(value) : undefined });\n      } else {\n        setLocalOptions({ ...localOptions, [name]: value });\n      }\n    },\n    [localOptions, setLocalOptions, options]\n  );\n\n  const onClose = useCallback(() => {\n    setOpen(!isOpen);\n  }, [setOpen, isOpen]);\n\n  const onCloseAndAccept = useCallback(() => {\n    // first validate if available\n    const maybeErrors: Record<string, string> = {};\n    Object.keys(localOptions).forEach((key) => {\n      const option: Option | undefined = options.find((o) => o.name === key);\n      if (option && option.validator && option.type !== \"boolean\") {\n        const errorFromOption = option.validator(localOptions[key] as string);\n        if (errorFromOption) {\n          maybeErrors[key] = errorFromOption;\n        }\n      }\n    });\n    if (Object.keys(maybeErrors).length > 0) {\n      setErrors(maybeErrors);\n      return;\n    }\n    setErrors(undefined);\n\n    // assume valid!\n    // now maybe map to other values\n    const convertedOptions: GenericOptions = {};\n    Object.keys(localOptions).forEach((key) => {\n      const option: Option | undefined = filteredOptions.find(\n        (o) => o.name === key\n      );\n      if (localOptions[key] === undefined) {\n        return;\n      }\n      if (option !== undefined) {\n        if (option.map) {\n          // user supplied mapping function from hash param value to user converted value\n          convertedOptions[key] = option.map(localOptions[key]!);\n        } else {\n          if (option.type === \"boolean\") {\n            convertedOptions[key] =\n              localOptions[key] === true ||\n              localOptions[key] === \"1\" ||\n              localOptions[key] === \"true\";\n          } else if (option.type === \"number\") {\n            convertedOptions[key] = typeof(localOptions[key]) === \"string\" ? parseFloat(localOptions[key] as string) : localOptions[key];\n          } else {\n            convertedOptions[key] = localOptions[key];\n          }\n        }\n      } else {\n        convertedOptions[key] = localOptions[key];\n      }\n    });\n\n    setOpen(!isOpen);\n    setOptionsInHashParams(convertedOptions);\n  }, [\n    setOpen,\n    isOpen,\n    options,\n    localOptions,\n    filteredOptions,\n    setOptionsInHashParams,\n    setErrors,\n  ]);\n\n  // preact complains in dev mode if this is moved out of a functional component\n  useEffect(() => {\n    if (!isOpen) {\n      return;\n    }\n    const onKeyup = (e: KeyboardEvent) => {\n      if (e.key === \"Enter\" && isOpen) onCloseAndAccept();\n    };\n    window.addEventListener(\"keyup\", onKeyup);\n    return () => {\n      window.removeEventListener(\"keyup\", onKeyup);\n    };\n  }, [onCloseAndAccept, isOpen]);\n\n  return (\n    <Drawer placement=\"top\" onClose={onCloseAndAccept} isOpen={isOpen}>\n      <DrawerOverlay>\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"0px\">\n            Configure metaframe (stored in URL hash params )\n          </DrawerHeader>\n          <DrawerBody>\n            <Box\n              maxW=\"80%\"\n              p={2}\n              borderWidth=\"4px\"\n              borderRadius=\"lg\"\n              overflow=\"hidden\"\n            >\n              <Grid templateColumns=\"repeat(12, 1fr)\" gap={6}>\n                {filteredOptions.map((option) => (\n                  <>\n                    <GridItem rowSpan={1} colSpan={4}>\n                      <Box\n                        w=\"100%\"\n                        h=\"100%\"\n                        display=\"flex\"\n                        alignItems=\"center\"\n                        justifyContent=\"flex-end\"\n                      >\n                        <Text textAlign={\"right\"} verticalAlign=\"bottom\">\n                          {option.displayName || option.name}:\n                        </Text>\n                      </Box>\n                    </GridItem>\n                    <GridItem rowSpan={1} colSpan={8}>\n                      {\" \"}\n                      {renderInput(\n                        option,\n                        localOptions[option.name],\n                        handleOnChange\n                      )}\n                    </GridItem>\n                  </>\n                ))}\n\n                <GridItem rowSpan={1} colSpan={12}></GridItem>\n                <GridItem rowSpan={1} colSpan={12}></GridItem>\n                <GridItem rowSpan={1} colSpan={12}></GridItem>\n                <GridItem rowSpan={1} colSpan={12}>\n                  <HStack spacing={2} direction=\"row\">\n                    <Spacer />\n                    {/*\n                      // @ts-ignore */}\n                    <IconButton\n                      size=\"lg\"\n                      color=\"red\"\n                      icon={(<CloseIcon />) as any}\n                      onClick={onClose}\n                    />\n\n                    {/*\n                      // @ts-ignore */}\n                    <IconButton\n                      size=\"lg\"\n                      color=\"green\"\n                      icon={(<CheckIcon />) as any}\n                      onClick={onCloseAndAccept}\n                    />\n                  </HStack>\n                </GridItem>\n              </Grid>\n            </Box>\n          </DrawerBody>\n        </DrawerContent>\n      </DrawerOverlay>\n    </Drawer>\n  );\n};\n\nconst renderInput = (option: Option, value: any, onChange: any) => {\n  switch (option.type) {\n    case \"option\":\n      return (\n        <Select\n          name={option.name}\n          value={value}\n          onChange={onChange}\n          placeholder=\"Select option\"\n        >\n          {option.options!.map((optionChoice) => (\n            <option value={optionChoice}>{optionChoice}</option>\n          ))}\n        </Select>\n      );\n    case \"boolean\":\n      return (\n        <Switch\n          name={option.name}\n          // @ts-ignore\n          rightIcon={<CheckIcon />}\n          onChange={onChange}\n          isChecked={value === true || value === \"1\"}\n          value={value ? 0 : 1}\n        />\n      );\n    default:\n      return (\n        <Box w=\"100%\" h=\"10\">\n          <Input\n            name={option.name}\n            type=\"text\"\n            placeholder=\"\"\n            value={value === undefined ? option.default : value}\n            onInput={onChange}\n          />\n        </Box>\n      );\n  }\n};\n","import create from \"zustand\";\nimport { CodeResult } from \"./hooks/codeHooks\";\n\nexport type MessagePayload = {\n  message: string;\n  type: \"error\" | \"warning\" | \"info\";\n  messages?: string[];\n};\n\nexport enum Mode {\n  Start,\n  Editing,\n  Running,\n  Finished,\n}\n\nexport type StoreState = {\n  code: string | undefined;\n  result: CodeResult<any> | undefined;\n  mode: Mode;\n  setCode: (code: string | undefined) => void;\n  setResult: (result: CodeResult<any> | undefined) => void;\n  setMode: (mode: Mode) => void;\n};\n\nexport const useStore = create<StoreState>((set) => ({\n  code: undefined,\n  result: undefined,\n  mode: Mode.Start,\n  setCode: (code: string | undefined) => set((state) => ({ code })),\n  setResult: (result: CodeResult<any> | undefined) =>\n    set((state) => ({ result })),\n  setMode: (mode: Mode) => set((state) => ({ mode })),\n}));\n","import { FunctionalComponent } from \"preact\";\nimport {\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n} from \"@chakra-ui/react\";\nimport { useStore, Mode } from \"../store\";\nimport { BeatLoader } from \"react-spinners\";\nimport { useHashParamBoolean } from \"@metapages/metaframe-hook\";\n\nexport const CodeResults: FunctionalComponent = () => {\n  const mode = useStore((state) => state.mode);\n  const result = useStore((state) => state.result);\n  // presentation mode means hide all the editing stuff\n  const [isPresentationMode] = useHashParamBoolean(\"presentation\");\n\n  if (Mode.Running === mode) {\n    return <BeatLoader size={8} color=\"blue\" />;\n  }\n  if (!result || isPresentationMode) {\n    return null;\n  }\n\n  if (result.failure) {\n    return (\n      <>\n        <Alert status=\"error\">\n          <AlertIcon />\n          <AlertTitle mr={2}>\n            Error\n            {result?.failure?.phase ? \" in phase \" + result.failure.phase : \"\"}\n          </AlertTitle>\n        </Alert>\n        <Alert status=\"error\">\n          <AlertIcon />\n          <AlertDescription>{`${result.failure?.error}`}</AlertDescription>\n        </Alert>\n      </>\n    );\n  } else {\n    return (\n      <Alert status=\"success\">\n        <AlertIcon />\n      </Alert>\n    );\n  }\n};\n","export interface CodeFailure {\n    error: any\n    phase?: string\n}\n\nexport interface CodeResult<R> {\n    failure?: CodeFailure;\n    // can be a cancel function\n    result?: R;\n}\n\nconst AsyncFunction = Object.getPrototypeOf(async function () { }).constructor\n\nexport const execJsCode = <R = any>(code: string, context: Record<string, any>): Promise<CodeResult<R>> => {\n    let exec = null\n    let args = Object.keys(context)\n    try {\n        // exec takes a single param 'exports', for which we provide an empty object.\n        // This is because whenever you import modules in the user-provided code, the TS compiler wants to\n        // define a magic property on the implicit `exports` variable to indicate the user code is also an ES module.\n        // It errors out if that implicit `exports` variable is undefined.\n        //\n        // The returned anonymous function takes a single param `context` which we provide at execution time.\n        // context is used to pass in the metaframe object\n        exec = AsyncFunction('exports', `\"use strict\"; return (async function(${args.join(', ')}){${code}})`)({}) // eslint-disable-line\n    } catch (e) {\n        return Promise.resolve({ failure: { error: e, phase: 'compile' } })\n    }\n\n    if (exec) {\n        var phase = 'exec'\n        let values = Object.values(context);\n        if (exec.apply) {\n            return exec.apply(null, values)\n            .then((r: any) => ({ result: r }))\n            .catch((e: any) => ({ failure: { error: e, phase } }))\n        } else {\n            return exec.then((a :typeof AsyncFunction) => {\n                return a.apply(null, values);\n            })\n            .then((r: any) => ({ result: r,  }))\n            .catch((e: any) => ({ failure: { error: e, phase } }))\n        }\n    }\n\n    return Promise.resolve({ failure: { error: 'compile failed', phase: 'compile' } })\n}\n","import { useCallback, useEffect } from \"preact/hooks\";\nimport { execJsCode } from \"../hooks/codeHooks\";\nimport { Mode, useStore } from \"../store\";\nimport { useMetaframe } from \"@metapages/metaframe-hook\";\n\n// Exports lazy code executor\nexport const useExecuteCodeWithMetaframe: () => [\n  (c: string | undefined) => Promise<void>,\n  any\n] = () => {\n  const metaframeObject = useMetaframe();\n  const setMode = useStore((state) => state.setMode);\n  const setResult = useStore((state) => state.setResult);\n  const result = useStore((state) => state.result);\n\n  // if new results, cancel existing running code\n  useEffect(() => {\n    return () => {\n      if (result?.result && typeof result?.result === \"function\") {\n        try {\n          result.result();\n        } catch (err) {\n          console.error(\"Failed to cancel without error:\", err);\n        }\n      }\n    };\n  }, [result]);\n\n  const execute = useCallback(\n    async (code: string | undefined) => {\n      if (!code || code.trim().length === 0) {\n        setMode(Mode.Finished);\n        setResult(undefined);\n        return;\n      }\n      if (!metaframeObject.metaframe) {\n        return;\n      }\n      setResult(undefined);\n      try {\n        const result = await execJsCode(code, {\n          metaframe: metaframeObject.metaframe,\n        });\n        setResult(result);\n      } catch (err) {\n        console.error(err);\n        setResult({ failure: { error: err } });\n      }\n      setMode(Mode.Finished);\n    },\n    [metaframeObject.metaframe, setMode, setResult]\n  );\n\n  return [execute, result];\n};\n","import { FunctionalComponent } from \"preact\";\nimport { useCallback } from \"preact/hooks\";\nimport { IconButton } from \"@chakra-ui/react\";\nimport { EditIcon, CheckIcon } from \"@chakra-ui/icons\";\n\nimport {\n  MetaframeObject,\n  useMetaframe,\n  useHashParamBase64,\n} from \"@metapages/metaframe-hook\";\nimport { Mode, useStore } from \"../store\";\n\nexport const ButtonRun: FunctionalComponent = () => {\n  const metaframe: MetaframeObject = useMetaframe();\n  const mode = useStore((state) => state.mode);\n  const setMode = useStore((state) => state.setMode);\n  const codeInStore = useStore((state) => state.code);\n\n  // Split these next two otherwise editing is too slow as it copies to/from the URL\n  const [valueHashParam, setValueHashParam] = useHashParamBase64(\n    \"text\",\n    undefined\n  );\n\n  const onClick = useCallback(() => {\n    switch (mode) {\n      case Mode.Editing:\n        // If the values are different, update, this will trigger a new execution\n        if (valueHashParam !== codeInStore) {\n          setValueHashParam(codeInStore);\n        }\n        setMode(Mode.Running);\n        break;\n      case Mode.Finished:\n        setMode(Mode.Editing);\n        break;\n      case Mode.Running:\n        setMode(Mode.Editing);\n        break;\n      case Mode.Start:\n        break;\n    }\n  }, [\n    metaframe.metaframe,\n    codeInStore,\n    valueHashParam,\n    setValueHashParam,\n    mode,\n    setMode,\n  ]);\n\n  return (\n    <IconButton\n      verticalAlign=\"top\"\n      aria-label=\"Help\"\n      colorScheme={mode === Mode.Editing ? \"blue\" : undefined}\n      // @ts-ignore\n      icon={mode === Mode.Editing ? <CheckIcon /> : <EditIcon />}\n      size=\"md\"\n      onClick={onClick}\n      mr=\"4\"\n    />\n  );\n};\n","import { FunctionalComponent } from \"preact\";\nimport { useCallback, useState } from \"preact/hooks\";\nimport {\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerBody,\n  IconButton,\n  DrawerCloseButton,\n} from \"@chakra-ui/react\";\nimport { isIframe, getHashParamsInWindow } from \"@metapages/metaframe-hook\";\nimport { QuestionIcon } from \"@chakra-ui/icons\";\n\nexport const ButtonHelp: FunctionalComponent<{ url?: string }> = ({ url }) => {\n  const [open, setOpen] = useState<boolean>(\n    isIframe() || getHashParamsInWindow()[1][\"text\"] !== undefined\n      ? false\n      : true\n  );\n\n  url = url\n    ? url\n    : `${window.location.origin}${window.location.pathname}/README.md`;\n\n  const onClick = useCallback(() => {\n    setOpen(!open);\n  }, [open]);\n\n  return (\n    <>\n      <IconButton\n        verticalAlign=\"top\"\n        aria-label=\"Help\"\n        // @ts-ignore\n        icon={<QuestionIcon />}\n        size=\"md\"\n        onClick={onClick}\n        mr=\"4\"\n      />\n      <HelpPanel url={url} isOpen={open} setOpen={setOpen} />\n    </>\n  );\n};\n\nconst HelpPanel: FunctionalComponent<{\n  url: string;\n  isOpen: boolean;\n  setOpen: (open: boolean) => void;\n}> = ({ isOpen, setOpen, url }) => {\n  console.log(\"isOpen\", isOpen);\n  const onClose = useCallback(() => {\n    setOpen(!isOpen);\n  }, [setOpen, isOpen]);\n\n  const onOverlayClick = useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const iframeUrl = `https://metapages.github.io/metaframe-markdown/#?url=${url}`;\n\n  return (\n    <Drawer\n      size=\"full\"\n      placement=\"top\"\n      onClose={onClose}\n      isOpen={isOpen}\n      onOverlayClick={onOverlayClick}\n    >\n      <DrawerOverlay>\n        <DrawerContent>\n          <DrawerCloseButton size=\"lg\" bg=\"gray.100\" />\n          <DrawerBody>\n            <iframe width=\"100%\" height=\"100%\" src={iframeUrl} />\n          </DrawerBody>\n        </DrawerContent>\n      </DrawerOverlay>\n    </Drawer>\n  );\n};\n","import { FunctionalComponent } from \"preact\";\nimport { useCallback } from \"preact/hooks\";\nimport { IconButton } from \"@chakra-ui/react\";\nimport { useHashParamBoolean } from \"@metapages/metaframe-hook\";\nimport { ViewIcon } from \"@chakra-ui/icons\";\n\nexport const ButtonPresentationMode: FunctionalComponent = () => {\n  const [presentationMode, setPresentationMode] = useHashParamBoolean(\n    \"presentation\",\n    undefined\n  );\n\n  const onClick = useCallback(() => {\n    setPresentationMode(!presentationMode);\n    window.location.reload();\n  }, [presentationMode, setPresentationMode]);\n\n  return (\n    <>\n      <IconButton\n        verticalAlign=\"top\"\n        aria-label=\"Help\"\n        // @ts-ignore\n        icon={<ViewIcon />}\n        size=\"md\"\n        onClick={onClick}\n        mr=\"4\"\n      />\n    </>\n  );\n};\n","/**\n * Simple:\n *  - any input sets\n *    - the content to the editor\n *    - the name to the input name\n *    - the save button is deactivated\n *  The save button sends the editor content to the same input name\n */\n\nimport { FunctionalComponent } from \"preact\";\nimport { useEffect } from \"preact/hooks\";\nimport { Box, Flex, Spacer, VStack } from \"@chakra-ui/react\";\nimport {\n  useHashParamJson,\n  useHashParamBase64,\n  useHashParamBoolean,\n} from \"@metapages/metaframe-hook\";\nimport { Editor } from \"/@/components/Editor\";\nimport { Option, ButtonOptionsMenu } from \"/@/components/ButtonOptionsMenu\";\nimport { CodeResults } from \"/@/components/CodeResults\";\nimport { Mode, useStore } from \"/@/store\";\nimport { useExecuteCodeWithMetaframe } from \"/@/hooks/useExecuteCodeWithMetaframe\";\nimport { ButtonRun } from \"/@/components/ButtonRun\";\nimport { ButtonHelp } from \"/@/components/ButtonHelp\";\nimport { ButtonPresentationMode } from '../components/ButtonPresentationMode';\n\nconst appOptions: Option[] = [\n  {\n    name: \"theme\",\n    displayName: \"Light/Dark theme\",\n    default: \"light\",\n    type: \"option\",\n    options: [\"light\", \"vs-dark\"],\n  },\n  {\n    name: \"menuAtBottom\",\n    displayName: \"Place menu bar at bottom of render content\",\n    default: false,\n    type: \"boolean\",\n  },\n];\n\ntype OptionBlob = {\n  theme: string;\n  menuAtBottom: boolean;\n};\n\nexport const Route: FunctionalComponent = () => {\n  // metaframe configuration\n  const [options] = useHashParamJson<OptionBlob>(\"options\", {\n    theme: \"light\",\n    menuAtBottom: false,\n  });\n  // presentation mode means hide all the editing stuff\n  const [isPresentationMode] = useHashParamBoolean(\"presentation\");\n  const codeInStore = useStore((state) => state.code);\n  const setCodeInStore = useStore((state) => state.setCode);\n  const mode = useStore((state) => state.mode);\n  const setMode = useStore((state) => state.setMode);\n  const [runCode] = useExecuteCodeWithMetaframe();\n\n  // Split these next two otherwise editing is too slow as it copies to/from the URL\n  const [valueHashParam] = useHashParamBase64(\"text\", undefined);\n\n  // If state === Mode.Start, transition to Mode.Running.\n  // If there is no code, it's a no-op\n  useEffect(() => {\n    if (mode === Mode.Start) {\n      setMode(Mode.Running);\n    }\n  }, [mode, setMode]);\n\n  // If state === Mode.Running, exec the code\n  useEffect(() => {\n    if (mode !== Mode.Running) {\n      return;\n    }\n\n    // The code values are the same, but the user clicked the button, so execute\n    if (runCode) {\n      runCode(codeInStore);\n    }\n  }, [mode, codeInStore, runCode]);\n\n  // source of truth: the URL param #?text=<HashParamBase64>\n  // if that changes, set the local value\n  // the local value changes fast from editing\n  useEffect(() => {\n    setCodeInStore(valueHashParam);\n    if (runCode) {\n      runCode(valueHashParam);\n    }\n  }, [valueHashParam, setCodeInStore, runCode]);\n\n  if (isPresentationMode) {\n    return <div id=\"render\" />;\n  }\n\n  const menu = (\n    <VStack spacing={2} alignItems=\"flex-start\">\n      <Flex width=\"100%\">\n        <ButtonRun />\n        <Spacer />\n        <ButtonPresentationMode />\n        <ButtonHelp />\n        <ButtonOptionsMenu options={appOptions} />\n      </Flex>\n      <CodeResults />\n    </VStack>\n  );\n\n  return (\n    <Box w=\"100%\" p={2}>\n      <VStack spacing={2} alignItems=\"flex-start\">\n        {options?.menuAtBottom ? null : <Box w=\"100%\">{menu}</Box>}\n\n        {mode === Mode.Editing ? (\n          <Box w=\"100%\">\n            <Editor\n              mode=\"javascript\"\n              theme={options?.theme || \"light\"}\n              setValue={setCodeInStore}\n              value={codeInStore}\n            />\n          </Box>\n        ) : (\n          <div id=\"render\" />\n        )}\n\n        {options?.menuAtBottom ? <Box w=\"100%\">{menu}</Box> : null}\n      </VStack>\n    </Box>\n  );\n};\n","import { FunctionalComponent } from \"preact\";\nimport { Route as Home } from \"/@/routes/home\";\n\nexport const App: FunctionalComponent = () => {\n  return <Home />;\n};\n","import { render } from \"preact\";\nimport { WithMetaframe } from \"@metapages/metaframe-hook\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { App } from \"./App\";\n\nrender(\n  <ChakraProvider>\n    <WithMetaframe>\n      <App />\n    </WithMetaframe>\n  </ChakraProvider>,\n  document.getElementById(\"root\")!\n);\n"],"names":["jsxRuntime.jsx","jsxRuntime.jsxs","jsxRuntime.Fragment","Editor","mode","value","setValue","theme","_jsx","MonacoEditor","minimap","enabled","useOptions","options","chosenOptions","optionsState","setOptionsState","useState","newOptions","concat","forEach","option","type","suboptions","keys","key","val","ButtonOptionsMenu","hashkey","open","setOpen","onClick","useCallback","_jsxs","OptionsMenu","isOpen","optionsInHashParams","setOptionsInHashParams","useHashParamJson","Object","fromEntries","filter","o","default","map","name","localOptions","setLocalOptions","filteredOptions","errors","setErrors","undefined","handleOnChange","event","target","flattenedOptions","values","oo","find","error","onClose","onCloseAndAccept","maybeErrors","validator","errorFromOption","length","convertedOptions","parseFloat","onKeyup","e","addEventListener","removeEventListener","DrawerOverlay","DrawerHeader","DrawerBody","displayName","renderInput","onChange","optionChoice","Mode","useStore","create","set","code","result","setCode","state","setResult","setMode","CodeResults","isPresentationMode","useHashParamBoolean","Running","BeatLoader","failure","phase","AsyncFunction","getPrototypeOf","constructor","execJsCode","context","exec","args","join","Promise","resolve","apply","then","r","catch","a","useExecuteCodeWithMetaframe","metaframeObject","useMetaframe","err","trim","Finished","metaframe","ButtonRun","codeInStore","valueHashParam","setValueHashParam","useHashParamBase64","Editing","Start","ButtonHelp","url","isIframe","getHashParamsInWindow","window","location","origin","pathname","HelpPanel","log","onOverlayClick","iframeUrl","DrawerCloseButton","ButtonPresentationMode","presentationMode","setPresentationMode","reload","appOptions","Route","menuAtBottom","setCodeInStore","runCode","menu","App","Home","render","WithMetaframe","document","getElementById"],"mappings":"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"}